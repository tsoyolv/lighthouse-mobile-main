#!/usr/bin/env sh

ENV=${1:-gradle}
ENV2=${2:-settings}

function gradle_properties {
    grep "${1}" ${ENV}.properties|cut -d'=' -f2
}

function settings_gradle {
    grep "${2}" ${ENV2}.gradle|cut -d'=' -f2 | sed 's/ //g' | sed 's/^.//;s/.$//'
}

PROJ_NAME=$(settings_gradle 'rootProject.name')
PROJ_VERSION=$(gradle_properties 'projectVersion')

printf '============================================ ATTENTION! YOU HAVE TO RUN COMMAND FROM ROOT DIRECTORY ==============================================\n\n'

printf '============================================ Project name: '
printf ${PROJ_NAME}
printf ', version: '
printf ${PROJ_VERSION}
printf " ============================================\n\n"

printf '============================================ Docker HUB registry login start ==============================================\n\n'
# Read Login
printf "ENTER DockerHUB login: "
read registryLogin
printf "Login entered: "
printf $registryLogin
printf "\n\n"

# Read Password
printf "ENTER DockerHUB password: "
read -s registryPassword
printf "Password entered\n\n"

docker logout

if docker login --username $registryLogin --password $registryPassword; then
    echo "docker login successfull"
else
    echo "docker login FAILED. EXIT"
    exit 0;
fi

printf '============================================ Docker HUB registry login end ==============================================\n\n'

printf '============================================ Create docker image start ==============================================\n\n'

if git diff-index --quiet HEAD --; then
    echo "GIT OK"
else
    echo "There is git changes! FAILED. EXIT"
    exit 1;
fi

if ./gradlew clean; then
    echo "gradle clean OK"
else
    echo "gradle clean FAILED. EXIT"
    exit 2;
fi

if ./gradlew test; then
    echo "gradle test OK"
else
    echo "gradle test FAILED. EXIT"
    exit 3;
fi

if ./gradlew bootJar; then
    echo "gradle bootJar OK"
else
    echo "gradle bootJar FAILED. EXIT"
    exit 4;
fi

mkdir -p build/dependency && (cd build/dependency; jar -xf ../libs/*.jar)
docker build -f docker/Dockerfile -t ${PROJ_NAME}:${PROJ_VERSION} .
printf '============================================ Create docker image end ==============================================\n\n'

printf '============================================ Docker push start ==============================================\n\n'
docker tag ${PROJ_NAME}:${PROJ_VERSION} $registryLogin/${PROJ_NAME}:${PROJ_VERSION}
docker push $registryLogin/${PROJ_NAME}:${PROJ_VERSION}
docker tag ${PROJ_NAME}:${PROJ_VERSION} $registryLogin/${PROJ_NAME}:latest
docker push $registryLogin/${PROJ_NAME}:latest
printf '============================================ Docker push end ==============================================\n\n'

printf '============================================ Delete image from local machine start ==============================================\n\n'
docker image rm $registryLogin/${PROJ_NAME}:${PROJ_VERSION}
docker image rm $registryLogin/${PROJ_NAME}:latest
printf '============================================ Delete image from local machine end ==============================================\n\n'